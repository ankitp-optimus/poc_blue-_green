trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  imageName: 'pocbluegreendeployment'
  acrName: 'bluegreendeployment'  # Without .azurecr.io
  azureSubscriptionEndpoint: 'Ankit_Service_Connection'
  containerAppName: 'poc-bluegreen-app'
  resourceGroup: 'RG_Ankit_Pathak'
  environmentName: 'aca-env'

stages:
# ------------- BUILD AND PUSH STAGE ----------------
- stage: Build
  displayName: Build and Push
  jobs:
    - job: BuildAndPush
      displayName: Docker Build and Push
      pool:
        vmImage: ubuntu-latest
      steps:
        - script: |
            echo "Cloning repository..."
            git clone https://github.com/ankitp-optimus/poc_blue-_green.git src
            ls -la src/
            find src/ -name "dockerfile" -o -name "Dockerfile"
          displayName: Clone and Verify Structure

        - task: AzureCLI@2
          displayName: Login to Azure and ACR
          inputs:
            azureSubscription: $(azureSubscriptionEndpoint)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              az acr login --name $(acrName)

        - script: |
            cd src
            docker build -t $(acrName).azurecr.io/$(imageName):$(tag) \
                         -t $(acrName).azurecr.io/$(imageName):latest \
                         -f DockerFile .
          displayName: Docker Build

        - script: |
            docker push $(acrName).azurecr.io/$(imageName):$(tag)
            docker push $(acrName).azurecr.io/$(imageName):latest
          displayName: Docker Push


- stage: BlueGreenDeploy
  displayName: Blue-Green Deployment
  dependsOn: Build
  jobs:
  - job: DeployJob
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: AzureCLI@2
      displayName: Deploy new revision with green commit ID
      inputs:
        azureSubscription: $(azureSubscriptionEndpoint)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          # Set variables
          APP_NAME=$(containerAppName)
          RESOURCE_GROUP=$(resourceGroup)
          IMAGE_TAG=$(tag)
          GREEN_COMMIT_ID=$IMAGE_TAG

          # Update container app with new green revision
          az containerapp update --name $APP_NAME --resource-group $RESOURCE_GROUP --image $(acrName).azurecr.io/$(imageName):$GREEN_COMMIT_ID --revision-suffix $GREEN_COMMIT_ID --set-env-vars REVISION_COMMIT_ID=$GREEN_COMMIT_ID

          # Label new revision 'green'
          az containerapp revision label add --name $APP_NAME --resource-group $RESOURCE_GROUP --label green --revision $APP_NAME--$GREEN_COMMIT_ID

          # Shift 100% traffic to green revision (new)
          az containerapp ingress traffic set --name $APP_NAME --resource-group $RESOURCE_GROUP --label-weight blue=0 green=100

          echo "Blue-Green deployment completed: traffic shifted to green revision $GREEN_COMMIT_ID"
