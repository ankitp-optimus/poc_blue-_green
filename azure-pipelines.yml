trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  imageName: 'pocbluegreendeployment'
  acrName: 'bluegreendeployment'  # Without .azurecr.io
  azureSubscriptionEndpoint: 'Ankit_Service_Connection'
  containerAppName: 'poc-bluegreen-app'
  resourceGroup: 'RG_Ankit_Pathak'
  environmentName: 'aca-env'
  blueLabel: 'blue'
  greenLabel: 'green'

stages:
# ------------- BUILD AND PUSH STAGE ----------------
- stage: Build
  displayName: Build and Push
  jobs:
    - job: BuildAndPush
      displayName: Docker Build and Push
      pool:
        vmImage: ubuntu-latest
      steps:
        - script: |
            echo "Cloning repository..."
            git clone https://github.com/ankitp-optimus/poc_blue-_green.git src
            ls -la src/
            find src/ -name "dockerfile" -o -name "Dockerfile"
          displayName: Clone and Verify Structure

        - task: AzureCLI@2
          displayName: Login to Azure and ACR
          inputs:
            azureSubscription: $(azureSubscriptionEndpoint)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              az acr login --name $(acrName)

        - script: |
            cd src
            docker build -t $(acrName).azurecr.io/$(imageName):$(tag) \
                         -t $(acrName).azurecr.io/$(imageName):latest \
                         -f DockerFile .
          displayName: Docker Build

        - script: |
            docker push $(acrName).azurecr.io/$(imageName):$(tag)
            docker push $(acrName).azurecr.io/$(imageName):latest
          displayName: Docker Push

# ------------- DEPLOY STAGE ----------------
- stage: Deploy
  displayName: Blue-Green Deploy
  dependsOn: Build
  jobs:
    - job: DeployBlueGreen
      displayName: Blue-Green Deploy Job
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureCLI@2
          inputs:
            azureSubscription: $(azureSubscriptionEndpoint)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              tag=$(Build.SourceVersion)
              tag=${tag:0:7}

              echo "Fetching current green revision..."
              CURRENT_GREEN=$(az containerapp revision list \
                --name "$(containerAppName)" \
                --resource-group "$(resourceGroup)" \
                --query "[?labels.green].name" \
                -o tsv)
              echo "Current green revision: $CURRENT_GREEN"

              echo "Deploying new revision with image: $(acrName).azurecr.io/$(imageName):latest"
              az containerapp update \
                --name "$(containerAppName)" \
                --resource-group "$(resourceGroup)" \
                --image "$(acrName).azurecr.io/$(imageName):$tag" \
                --revision-suffix "$tag" \
                --set-env-vars REVISION_COMMIT_ID="$tag"

              NEW_REVISION="$(containerAppName)--$tag"

              echo "Labeling new revision as blue"
              az containerapp revision label add \
                --name "$(containerAppName)" \
                --resource-group "$(resourceGroup)" \
                --label "blue" \
                --revision "$NEW_REVISION"

              echo "Routing 100% traffic to new revision (blue)"
              az containerapp ingress traffic set \
                --name "$(containerAppName)" \
                --resource-group "$(resourceGroup)" \
                --label-weight "blue=100" "green=0"

              echo "Swapping labels: blue → green, green → blue"
              az containerapp revision label remove \
                --name "$(containerAppName)" \
                --resource-group "$(resourceGroup)" \
                --label "blue" \
                --revision "$NEW_REVISION"

              az containerapp revision label add \
                --name "$(containerAppName)" \
                --resource-group "$(resourceGroup)" \
                --label "green" \
                --revision "$NEW_REVISION"

              if [ -n "$CURRENT_GREEN" ]; then
                az containerapp revision label remove \
                  --name "$(containerAppName)" \
                  --resource-group "$(resourceGroup)" \
                  --label "green" \
                  --revision "$CURRENT_GREEN"

                az containerapp revision label add \
                  --name "$(containerAppName)" \
                  --resource-group "$(resourceGroup)" \
                  --label "blue" \
                  --revision "$CURRENT_GREEN"
              fi

              echo "Final label and traffic status:"
              az containerapp revision list \
                --name "$(containerAppName)" \
                --resource-group "$(resourceGroup)" \
                --query "[].{Revision:name, Active:active, TrafficWeight:trafficWeight, Labels:labels}" \
                -o table
          displayName: 'Blue-Green Deployment with Label Swap'
