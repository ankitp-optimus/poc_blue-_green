trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  imageName: 'pocbluegreendeployment'
  acrName: 'bluegreendeployment'  # Without .azurecr.io
  azureSubscriptionEndpoint: 'Ankit_Service_Connection'
  containerAppName: 'poc-bluegreen-app'
  resourceGroup: 'RG_Ankit_Pathak'
  environmentName: 'aca-env'

stages:
# ------------- BUILD AND PUSH STAGE ----------------
- stage: Build
  displayName: Build and Push
  jobs:
    - job: BuildAndPush
      displayName: Docker Build and Push
      pool:
        vmImage: ubuntu-latest
      steps:
        - script: |
            echo "Cloning repository..."
            git clone https://github.com/ankitp-optimus/poc_blue-_green.git src
            ls -la src/
            find src/ -name "dockerfile" -o -name "Dockerfile"
          displayName: Clone and Verify Structure

        - task: AzureCLI@2
          displayName: Login to Azure and ACR
          inputs:
            azureSubscription: $(azureSubscriptionEndpoint)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              az acr login --name $(acrName)

        - script: |
            cd src
            docker build -t $(acrName).azurecr.io/$(imageName):$(tag) \
                         -t $(acrName).azurecr.io/$(imageName):latest \
                         -f DockerFile .
          displayName: Docker Build

        - script: |
            docker push $(acrName).azurecr.io/$(imageName):$(tag)
            docker push $(acrName).azurecr.io/$(imageName):latest
          displayName: Docker Push


- stage: BlueGreenDeploy
  displayName: Blue-Green Deployment
  dependsOn: Build
  jobs:
    - job: Deploy
      displayName: Deploy and Swap
      pool:
        vmImage: ubuntu-latest
      steps:
        - task: AzureCLI@2
          displayName: Blue-Green Deployment
          inputs:
            azureSubscription: $(azureSubscriptionEndpoint)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              # 1. Get current traffic distribution
              echo "Current traffic distribution:"
              CURRENT_TRAFFIC=$(az containerapp ingress traffic show \
                --name $(containerAppName) \
                --resource-group $(resourceGroup) \
                --query "[].{label:label,weight:weight}" \
                -o tsv)
              echo "$CURRENT_TRAFFIC"

              # 2. Determine which revision is currently 'blue'
              CURRENT_BLUE=$(az containerapp revision list \
                --name $(containerAppName) \
                --resource-group $(resourceGroup) \
                --query "[?labels.any(name, name == '$(blueLabel)')].name" \
                -o tsv)
              echo "Current blue revision: $CURRENT_BLUE"

              # 3. Deploy new version to blue slot
              echo "Deploying new version as blue..."
              az containerapp update \
                --name $(containerAppName) \
                --resource-group $(resourceGroup) \
                --image $(acrName).azurecr.io/$(imageName):$(tag) \
                --revision-suffix $(tag) \
                --set-env-vars REVISION_COMMIT_ID=$(tag)

              # 4. Label new revision as blue
              echo "Labeling new revision as blue..."
              az containerapp revision label add \
                --name $(containerAppName) \
                --resource-group $(resourceGroup) \
                --label $(blueLabel) \
                --revision $(containerAppName)--$(tag)

              # 5. Swap traffic (100% to blue)
              echo "Shifting 100% traffic to blue..."
              az containerapp ingress traffic set \
                --name $(containerAppName) \
                --resource-group $(resourceGroup) \
                --label-weight $(blueLabel)=100 $(greenLabel)=0

              # 6. Swap labels (make new version green, old version blue)
              echo "Swapping labels..."
              # Remove blue label from new revision
              az containerapp revision label remove \
                --name $(containerAppName) \
                --resource-group $(resourceGroup) \
                --label $(blueLabel) \
                --revision $(containerAppName)--$(tag)
              
              # Add green label to new revision
              az containerapp revision label add \
                --name $(containerAppName) \
                --resource-group $(resourceGroup) \
                --label $(greenLabel) \
                --revision $(containerAppName)--$(tag)
              
              # Add blue label to old green revision (if exists)
              if [ -n "$CURRENT_BLUE" ]; then
                az containerapp revision label add \
                  --name $(containerAppName) \
                  --resource-group $(resourceGroup) \
                  --label $(blueLabel) \
                  --revision $CURRENT_BLUE
              fi

              # 7. Verify final state
              echo "Final revision states:"
              az containerapp revision list \
                --name $(containerAppName) \
                --resource-group $(resourceGroup) \
                --query "[].{Revision:name, Active:active, TrafficWeight:trafficWeight, Labels:labels}" \
                -o table